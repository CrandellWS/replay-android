apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSDKVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSDKVersion
        targetSdkVersion rootProject.ext.targetSDKVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testApplicationId "io.replay.framework.tests"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }
    lintOptions {
        abortOnError false
    }

    //defaultPublishConfig "debug" //use this when :relay-android:replay-android is being used as a local library project

    buildTypes {
        final def STRING = "String"
        final def REPLAY_URL = "REPLAY_URL"
        def url = {scheme, path, port -> "\"http$scheme://$path${!port.isEmpty() ? ":$port/" : "/"}\""}

        debug { //default build config works with emulator
            debuggable true
            buildConfigField STRING, REPLAY_URL, url("", "10.0.2.2", "3000")
        }
        genymotion.initWith(buildTypes.debug) //extra build config to work with Genymotion
        genymotion {
            debuggable true
            buildConfigField STRING, REPLAY_URL, url("", "192.168.56.1", "3000")
        }
        release {
            debuggable false
            buildConfigField STRING, REPLAY_URL, url("s", "api.replay.io", "")
        }
    }
}


dependencies {
    compile files('libs/jobqueue.jar')
}

task clearJar(type: Delete) {
    delete 'build/libs/replay-android.jar'
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename('classes.jar', "replay-android-${rootProject.ext.versionName}.jar")
}

makeJar.dependsOn(clearJar, build)

apply from: '../scripts/upload.gradle'
